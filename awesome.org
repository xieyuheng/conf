#+TITLE:  init-config of awesome
#+AUTHOR: 謝宇恆 / XIE Yuheng

* library
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  local gears = require("gears")
  local awful = require("awful")
  awful.rules = require("awful.rules")
  require("awful.autofocus")

  local wibox = require("wibox")
  local beautiful = require("beautiful")
  local naughty = require("naughty")

  local lain = require("lain")

  local revelation=require("revelation")

  #+end_src

* error handling
  * Check if awesome encountered an error during startup and fell back to
  * another config (This code will only ever execute for the fallback config)
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  if awesome.startup_errors then
      naughty.notify({ preset = naughty.config.presets.critical,
                       title = "Oops, there were errors during startup!",
                       text = awesome.startup_errors })
  end

  -- Handle runtime errors after startup
  do
      local in_error = false
      awesome.connect_signal("debug::error", function (err)
          -- Make sure we don't go into an endless error loop
          if in_error then return end
          in_error = true

          naughty.notify({ preset = naughty.config.presets.critical,
                           title = "Oops, an error happened!",
                           text = err })
          in_error = false
      end)
  end
  #+end_src

* terminal & editor
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  terminal = "xterm"
  editor = os.getenv("EDITOR") or "nano"
  editor_cmd = terminal .. " -e " .. editor
  #+end_src

* layout
  * table of layouts to cover with awful.layout.inc
    order matters
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  local layouts =
  {
      awful.layout.suit.tile,
      awful.layout.suit.tile.bottom,
      awful.layout.suit.max,
      -- awful.layout.suit.floating,
  }
  #+end_src

* beautiful
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  beautiful.init("~/.config/awesome/themes/cicada/theme.lua")

  revelation.init()

  if beautiful.wallpaper then
      for s = 1, screen.count() do
          gears.wallpaper.maximized(beautiful.wallpaper, s, true)
      end
  end
  #+end_src

* menu
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  -- Create a laucher widget and a main menu
  myawesomemenu = {
     { "manual", terminal .. " -e man awesome" },
     { "edit config", editor_cmd .. " " .. awesome.conffile },
     { "restart", awesome.restart },
     { "quit", awesome.quit }
  }

  mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                      { "open terminal", terminal }
                                    }
                          })

  mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                       menu = mymainmenu })
  #+end_src

* wibox
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  mytextclock = awful.widget.textclock("%m %d %H:%M")
  myspace = awful.widget.textclock(" ")
  mybar = awful.widget.textclock("(")
  myket = awful.widget.textclock(")")

  -- Create a wibox for each screen and add it
  mywibox = {}
  mypromptbox = {}
  mylayoutbox = {}
  mytaglist = {}
  mytaglist.buttons = awful.util.table.join(
                      awful.button({ }, 1, awful.tag.viewonly),
                      awful.button({ modkey }, 1, awful.client.movetotag),
                      awful.button({ }, 3, awful.tag.viewtoggle),
                      awful.button({ modkey }, 3, awful.client.toggletag),
                      awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                      awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                      )
  mytasklist = {}
  mytasklist.buttons = awful.util.table.join(
                       awful.button({ }, 1, function (c)
                                                if c == client.focus then
                                                    c.minimized = true
                                                else
                                                    -- Without this, the following
                                                    -- :isvisible() makes no sense
                                                    c.minimized = false
                                                    if not c:isvisible() then
                                                        awful.tag.viewonly(c:tags()[1])
                                                    end
                                                    -- This will also un-minimize
                                                    -- the client, if needed
                                                    client.focus = c
                                                    c:raise()
                                                end
                                            end),
                       awful.button({ }, 3, function ()
                                                if instance then
                                                    instance:hide()
                                                    instance = nil
                                                else
                                                    instance = awful.menu.clients({
                                                        theme = { width = 250 }
                                                    })
                                                end
                                            end),
                       awful.button({ }, 4, function ()
                                                awful.client.focus.byidx(1)
                                                if client.focus then client.focus:raise() end
                                            end),
                       awful.button({ }, 5, function ()
                                                awful.client.focus.byidx(-1)
                                                if client.focus then client.focus:raise() end
                                            end))




  -- Battery
  baticon = wibox.widget.imagebox(beautiful.bat)
  batbar = awful.widget.progressbar()
  batbar:set_color(beautiful.fg_normal)
  batbar:set_width(55)
  batbar:set_ticks(true)
  batbar:set_ticks_size(6)
  batbar:set_background_color(beautiful.bg_normal)
  batmargin = wibox.layout.margin(batbar, 2, 7)
  batmargin:set_top(6)
  batmargin:set_bottom(6)
  batupd = lain.widgets.bat({
      settings = function()
         if bat_now.perc == "N/A" or bat_now.status == "Not present" then
              bat_perc = 100
              baticon:set_image(beautiful.ac)
          elseif bat_now.status == "Charging" then
              bat_perc = tonumber(bat_now.perc)
              baticon:set_image(beautiful.ac)

              if bat_perc >= 98 then
                  batbar:set_color(green)
              elseif bat_perc > 50 then
                  batbar:set_color(beautiful.fg_normal)
              elseif bat_perc > 15 then
                  batbar:set_color(beautiful.fg_normal)
              else
                  batbar:set_color(red)
              end
          else
              bat_perc = tonumber(bat_now.perc)

              if bat_perc >= 98 then
                  batbar:set_color(green)
              elseif bat_perc > 50 then
                  batbar:set_color(beautiful.fg_normal)
                  baticon:set_image(beautiful.bat)
              elseif bat_perc > 15 then
                  batbar:set_color(beautiful.fg_normal)
                  baticon:set_image(beautiful.bat_low)
              else
                  batbar:set_color(red)
                  baticon:set_image(beautiful.bat_no)
              end
          end
          batbar:set_value(bat_perc / 100)
      end
  })
  batwidget = wibox.widget.background(batmargin)
  batwidget:set_bgimage(beautiful.widget_bg)

  for s = 1, screen.count() do
      -- Create a promptbox for each screen
      mypromptbox[s] = awful.widget.prompt()
      -- Create an imagebox widget which will contains an icon indicating which layout we're using.
      -- We need one layoutbox per screen.
      mylayoutbox[s] = awful.widget.layoutbox(s)
      mylayoutbox[s]:buttons(awful.util.table.join(
                             awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                             awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                             awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                             awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
      -- Create a taglist widget
      mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

      -- Create a tasklist widget
      mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

      -- Create the wibox
      mywibox[s] = awful.wibox({ position = "top", screen = s })

      -- Widgets that are aligned to the left
      local left_layout = wibox.layout.fixed.horizontal()
      left_layout:add(mylayoutbox[s])
      left_layout:add(myspace)
      left_layout:add(myspace)
      left_layout:add(mytaglist[s])
      left_layout:add(myspace)
      left_layout:add(myspace)
      left_layout:add(mypromptbox[s])

      -- Widgets that are aligned to the right
      local right_layout = wibox.layout.fixed.horizontal()
      if s == 1 then right_layout:add(wibox.widget.systray()) end

      right_layout:add(myspace)
      right_layout:add(mybar)
      right_layout:add(mytextclock)
      right_layout:add(myket)
      right_layout:add(myspace)
      right_layout:add(mybar)
      right_layout:add(batwidget)
      right_layout:add(myket)
      right_layout:add(myspace)

      -- Now bring it all together (with the tasklist in the middle)
      local layout = wibox.layout.align.horizontal()
      layout:set_left(left_layout)
      layout:set_middle(mytasklist[s])
      layout:set_right(right_layout)

      mywibox[s]:set_widget(layout)
  end
  #+end_src


* *key bindings*

* mouse bindings
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  root.buttons(awful.util.table.join(
      awful.button({ }, 3, function () mymainmenu:toggle() end),
      awful.button({ }, 4, awful.tag.viewnext),
      awful.button({ }, 5, awful.tag.viewprev)
  ))
  #+end_src

* note default key bindings

*** window manager control
    |-------------+--------------------------|
    | control + r | restart awesome.         |
    | shift + q   | quit awesome.            |
    |-------------+--------------------------|
    | r           | run prompt.              |
    | x           | run lua code prompt.     |
    |-------------+--------------------------|
    | return      | spawn terminal emulator. |
    | w           | open main menu.          |
    |-------------+--------------------------|

*** clients
    |-------------+------------------------|
    | m           | maximize client.       |
    | n           | minimize client.       |
    |-------------+------------------------|
    | control + n | restore client.        |
    | f           | set client fullscreen. |
    |-------------+------------------------|
    | shift + c   | kill focused client.   |
    | t           | set client on-top.     |
    |-------------+------------------------|

*** navigation
    |-------------+------------------------------------|
    | j           | focus next client.                 |
    | k           | focus previous client.             |
    |-------------+------------------------------------|
    | u           | focus first urgent client.         |
    |-------------+------------------------------------|
    | left        | view previous tag.                 |
    | right       | view next tag.                     |
    |-------------+------------------------------------|
    | 1-9         | switch to tag 1-9.                 |
    | control + j | focus next screen.                 |
    | control + k | focus previous screen.             |
    | escape      | focus previously selected tag set. |
    |-------------+------------------------------------|

*** layout modification
    |-----------------------+---------------------------------------------------------|
    | shift + j             | switch client with next client.                         |
    | shift + k             | switch client with previous client.                     |
    |-----------------------+---------------------------------------------------------|
    | o                     | send client to next screen.                             |
    |-----------------------+---------------------------------------------------------|
    | h                     | decrease master width factor by 5%.                     |
    | l                     | increase master width factor by 5%.                     |
    |-----------------------+---------------------------------------------------------|
    | shift + h             | increase number of master windows by 1.                 |
    | shift + l             | decrease number of master windows by 1.                 |
    |-----------------------+---------------------------------------------------------|
    | control + h           | increase number of columns for non-master windows by 1. |
    | control + l           | decrease number of columns for non-master windows by 1. |
    |-----------------------+---------------------------------------------------------|
    | space                 | switch to next layout.                                  |
    | shift + space         | switch to previous layout.                              |
    |-----------------------+---------------------------------------------------------|
    | control + space       | toggle client floating status.                          |
    | control + return      | swap focused client with master.                        |
    |-----------------------+---------------------------------------------------------|
    | control + 1-9         | toggle tag view.                                        |
    | shift + 1-9           | tag client with tag.                                    |
    | shift + control + 1-9 | toggle tag on client.                                   |
    |-----------------------+---------------------------------------------------------|

* modkey
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  modkey = "Mod1"
  #+end_src

* globalkeys
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  globalkeys = awful.util.table.join(
      -- awful.key({ modkey,           }, ",",  awful.tag.viewprev       ),
      -- awful.key({ modkey,           }, ".",  awful.tag.viewnext       ),

      -- awful.key({ modkey,           }, "Tab",
      --     function ()
      --         awful.client.focus.byidx( 1)
      --         if client.focus then client.focus:raise() end
      --     end),
      awful.key({ modkey,           }, "j",
          function ()
              awful.client.focus.byidx( 1)
              if client.focus then client.focus:raise() end
          end),
      awful.key({ modkey,           }, "k",
          function ()
              awful.client.focus.byidx(-1)
              if client.focus then client.focus:raise() end
          end),

      awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
      awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),

      awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
      awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),

      -- awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),

      awful.key({ modkey, "Shift"   }, "Return", function () awful.util.spawn(terminal) end),
      awful.key({ modkey, "Control" }, "r", awesome.restart),
      awful.key({ modkey, "Shift"   }, "q", awesome.quit),

      awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
      awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
      awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
      awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
      awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
      awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),

      -- revelation
      awful.key({ "Control" }, "Escape",      revelation),

      awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
      awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end)

  )
  #+end_src

* clientkeys
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  clientkeys = awful.util.table.join(
      awful.key({ modkey,  "Shift"    }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
      -- awful.key({ modkey,           }, "Return", function (c) c:swap(awful.client.getmaster()) end),
      -- awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
      awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end)
  )
  #+end_src

* tag
  * Be careful:
    we use keycodes to make it works on any keyboard layout.
  * This should map on the top row of your keyboard,
    usually 1 to 9.
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  tagtable = {

     "聲",
     "噭",
     "噭",
     "而",
     "彌",
     "厲",
     "兮",
     "似",
     "貞",
     "士",
     "之",
     "介",
     "心",

     "  ",

     "實",
     "淡",
     "泊",
     "而",
     "寡",
     "欲",
     "兮",
     "獨",
     "咍",
     "樂",
     "而",
     "長",
     "吟"

  }

  keycodetable = {

     9,
     67,
     68,
     69,
     70,
     71,
     72,
     73,
     74,
     75,
     76,
     95,
     96,

     77,

     49,
     10,
     11,
     12,
     13,
     14,
     15,
     16,
     17,
     18,
     19,
     20,
     21
  }

  -- Define a tag table which hold all screen tags.
  tags = {}
  for s = 1, screen.count() do
      -- Each screen has its own tag table.
     tags[s] = awful.tag(tagtable, s, layouts[1])
  end

  for i = 1, #tagtable do
      globalkeys = awful.util.table.join(globalkeys,
          -- View tag only.
          awful.key({ modkey }, "#" .. keycodetable[i],
                    function ()
                          local screen = mouse.screen
                          local tag = awful.tag.gettags(screen)[i]
                          if tag then
                             awful.tag.viewonly(tag)
                          end
                    end),
          -- Toggle tag.
          -- awful.key({ modkey, "Control" }, "#" .. keycodetable[i],
          --           function ()
          --               local screen = mouse.screen
          --               local tag = awful.tag.gettags(screen)[i]
          --               if tag then
          --                  awful.tag.viewtoggle(tag)
          --               end
          --           end),
          -- Move client to tag.
          awful.key({ modkey, "Shift" }, "#" .. keycodetable[i],
                    function ()
                        if client.focus then
                            local tag = awful.tag.gettags(client.focus.screen)[i]
                            if tag then
                                awful.client.movetotag(tag)
                            end
                       end
          end)
          -- ,
          -- -- Toggle tag.
          -- awful.key({ modkey, "Control", "Shift" }, "#" .. keycodetable[i],
          --           function ()
          --               if client.focus then
          --                   local tag = awful.tag.gettags(client.focus.screen)[i]
          --                   if tag then
          --                       awful.client.toggletag(tag)
          --                   end
          --               end
          -- end)
      )
  end
  #+end_src

* clientbuttons
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  clientbuttons = awful.util.table.join(
      awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
      awful.button({ modkey }, 1, awful.mouse.client.move),
      awful.button({ modkey }, 3, awful.mouse.client.resize))
  #+end_src

* set keys
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  root.keys(globalkeys)
  #+end_src

* autostart
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  awful.util.spawn_with_shell("xmodmap ~/.xmodmap")
  awful.util.spawn_with_shell("~/.wallpaper/random-wallpaper.sh")
  -- awful.util.spawn_with_shell("xcompmgr")
  #+end_src


* rules
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  -- Rules to apply to new clients (through the "manage" signal).
  awful.rules.rules = {
      -- All clients will match this rule.
      { rule = { },
        properties = { border_width = beautiful.border_width,
                       border_color = beautiful.border_normal,
                       focus = awful.client.focus.filter,
                       raise = true,
                       keys = clientkeys,

                       size_hints_honor = false,

                       buttons = clientbuttons } }

      -- { rule = { class = "Emacs" },
      --   properties = { size_hints_honor = false; } },

      -- { rule = { class = "MPlayer" },
      --   properties = { floating = true } },
      -- { rule = { class = "pinentry" },
      --   properties = { floating = true } },
      -- { rule = { class = "gimp" },
      --   properties = { floating = true } },
      -- Set Firefox to always map on tags number 2 of screen 1.
      -- { rule = { class = "Firefox" },
      --   properties = { tag = tags[1][2] } }
  }
  #+end_src

* signals
  #+begin_src lua :tangle ~/.config/awesome/rc.lua
  -- Signal function to execute when a new client appears.
  client.connect_signal("manage", function (c, startup)
      -- Enable sloppy focus
      c:connect_signal("mouse::enter", function(c)
          if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
              and awful.client.focus.filter(c) then
              client.focus = c
          end
      end)

      if not startup then
          -- Set the windows at the slave,
          -- i.e. put it at the end of others instead of setting it master.
          -- awful.client.setslave(c)

          -- Put windows in a smart way, only if they does not set an initial position.
          if not c.size_hints.user_position and not c.size_hints.program_position then
              awful.placement.no_overlap(c)
              awful.placement.no_offscreen(c)
          end
      end

      local titlebars_enabled = false
      if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
          -- buttons for the titlebar
          local buttons = awful.util.table.join(
                  awful.button({ }, 1, function()
                      client.focus = c
                      c:raise()
                      awful.mouse.client.move(c)
                  end),
                  awful.button({ }, 3, function()
                      client.focus = c
                      c:raise()
                      awful.mouse.client.resize(c)
                  end)
                  )

          -- Widgets that are aligned to the left
          local left_layout = wibox.layout.fixed.horizontal()
          left_layout:add(awful.titlebar.widget.iconwidget(c))
          left_layout:buttons(buttons)

          -- Widgets that are aligned to the right
          local right_layout = wibox.layout.fixed.horizontal()
          right_layout:add(awful.titlebar.widget.floatingbutton(c))
          right_layout:add(awful.titlebar.widget.maximizedbutton(c))
          right_layout:add(awful.titlebar.widget.stickybutton(c))
          right_layout:add(awful.titlebar.widget.ontopbutton(c))
          right_layout:add(awful.titlebar.widget.closebutton(c))

          -- The title goes in the middle
          local middle_layout = wibox.layout.flex.horizontal()
          local title = awful.titlebar.widget.titlewidget(c)
          title:set_align("center")
          middle_layout:add(title)
          middle_layout:buttons(buttons)

          -- Now bring it all together
          local layout = wibox.layout.align.horizontal()
          layout:set_left(left_layout)
          layout:set_right(right_layout)
          layout:set_middle(middle_layout)

          awful.titlebar(c):set_widget(layout)
      end
  end)

  client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
  client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

  -- Transparency

  -- client.connect_signal("focus", function(c)
  --                               c.border_color = beautiful.border_focus
  --                               c.opacity = 1
  --                            end)
  -- client.connect_signal("unfocus", function(c)
  --                                 c.border_color = beautiful.border_normal
  --                                 c.opacity = 0.7
  --                              end)
  #+end_src
