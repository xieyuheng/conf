#+TITLE:  init-config of xmonad
#+AUTHOR: 謝宇恆 / XIE Yuheng

* import
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  import XMonad
  import Data.Monoid
  import System.Exit
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.ManageHelpers
  import XMonad.Layout.NoBorders
  import XMonad.Layout.Gaps
  import XMonad.Util.Run(spawnPipe)
  import XMonad.Util.EZConfig(additionalKeys)
  import System.IO

  import XMonad.Prompt
  import XMonad.Prompt.AppLauncher as AL

  import qualified XMonad.StackSet as W -- to shift and float windows
  import qualified Data.Map        as M

  import XMonad.Config.Kde
  #+end_src
* key bindings
  i need to free some keys for emacs
  s-{w,s,q,e}
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

      -- launch a terminal
      [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)

      -- launch dmenu
      -- , ((modm,               xK_p     ), spawn "exe=`dmenu_path | dmenu` && eval \"exec $exe\"")

      -- launch gmrun
      -- , ((modm .|. shiftMask, xK_p     ), spawn "gmrun")

      -- close focused window
      , ((modm .|. shiftMask, xK_c     ), kill)

       -- Rotate through the available layout algorithms
      , ((modm,               xK_space ), sendMessage NextLayout)

      -- Resize viewed windows to the correct size
      , ((modm,               xK_n     ), refresh)

      -- Move focus to the next window
      , ((modm,               xK_Tab   ), windows W.focusDown)

      -- Move focus to the next window
      , ((modm,               xK_j     ), windows W.focusDown)

      -- Move focus to the previous window
      , ((modm,               xK_k     ), windows W.focusUp  )

      -- Move focus to the master window
      , ((modm,               xK_m     ), windows W.focusMaster  )

      -- Swap the focused window and the master window
      , ((modm,               xK_Return), windows W.swapMaster)

      -- Swap the focused window with the next window
      , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )

      -- Swap the focused window with the previous window
      , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

      -- Shrink the master area
      , ((modm,               xK_h     ), sendMessage Shrink)

      -- Expand the master area
      , ((modm,               xK_l     ), sendMessage Expand)

      -- Push window back into tiling
      , ((modm,               xK_t     ), withFocused $ windows . W.sink)

      -- Increment the number of windows in the master area
      , ((modm              , xK_comma ), sendMessage (IncMasterN 1))

      -- Deincrement the number of windows in the master area
      , ((modm              , xK_period), sendMessage (IncMasterN (-1)))

      -- Quit xmonad
      -- , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))

      -- Restart xmonad
      , ((modm .|. shiftMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")

      -- 启动大emacs
      -- 不使用下面的快捷键了, 因为会不小心按到它, 还因为中文输入法的问题
      -- , ((modm .|. shiftMask, xK_x    ), spawn "LC_CTYPE=zh_CN.UTF-8 emacs")

      -- 启动小emacs
      -- 下面的打开方式使得eshell可以被方便开启
      -- 从而有机会像一个真正的终端一样被使用
      -- , ((modm,               xK_x    ), spawn "LC_CTYPE=zh_CN.UTF-8 emacsclient -c -e \"(open-eshell-in-emacsclient)\"")
      -- , ((modm,               xK_z    ), spawn "urxvt -e emacsclient -t -c -e \"(open-eshell-in-emacsclient)\"")
      , ((modm .|. shiftMask, xK_x    ), spawn "LC_CTYPE=zh_CN.UTF-8 emacsclient -c -e \"(open-eshell-in-emacsclient)\"")
      -- , ((modm .|. shiftMask, xK_z    ), spawn "urxvt -e emacsclient -t -c -e \"(open-eshell-in-emacsclient)\"")



      -- , ((modm, xK_g), AL.launchApp defaultXPConfig "xterm -e" )



      ]
      ++

      -- mod-[1..9], Switch to workspace N
      -- mod-shift-[1..9], Move client to workspace N
      [((m .|. modm, k), windows $ f i)
           | (i, k) <- zip (XMonad.workspaces conf)
                       [xK_Escape, xK_F1, xK_F2, xK_F3, xK_F4, xK_F5, xK_F6, xK_F7, xK_F8, xK_F9, xK_F10, xK_F11, xK_F12,
                        xK_grave, xK_1, xK_2, xK_3, xK_4, xK_5, xK_6, xK_7, xK_8, xK_9, xK_0, xK_minus, xK_equal]
           , (f, m) <- [(W.view, 0), -- was (W.greedyView, 0)
                        (W.shift, shiftMask)]]

      -- mod-{i,o,p}, Switch to physical/Xinerama screens 1, 2, or 3
      -- mod-shift-{i,o,p}, Move client to screen 1, 2, or 3
      ++
      [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
            | (key, sc) <- zip [xK_i, xK_o, xK_p] [0..]
          , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
  #+end_src
* general seting
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  -- Whether focus follows the mouse pointer.
  myFocusFollowsMouse :: Bool
  myFocusFollowsMouse = False

  -- Width of the window border in pixels.
  myBorderWidth   = 1

  -- Border colors for unfocused and focused windows, respectively.
  myNormalBorderColor  = "#dddddd"
  myFocusedBorderColor = "#ff0000"
  #+end_src
* terminal
  The preferred terminal program
  which is used in a binding below and by
  certain contrib modules
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  -- myTerminal = "urxvt"
  myTerminal = "xterm"
  #+end_src
* the modkey
  The "windows key" is usually mod4Mask
  .

  You can find the numlock modifier by running "xmodmap" and looking for a
  modifier with Num_Lock bound to it:

  > $ xmodmap | grep Num
  > mod2        Num_Lock (0x4d)

  Set numlockMask = 0 if you don't have a numlock key, or want to treat
  numlock status separately.

  myNumlockMask   = mod2Mask -- deprecated in xmonad-0.9.1
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  myModMask       = mod4Mask
  #+end_src
* workspaces
  any string may be used as a workspace name
  the number of workspaces is determined by the length of this list
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  myWorkspaces    = ["Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12",
                     "grave","1","2","3","4","5","6","7","8","9","0","minus","equal"]
  #+end_src
* mouse bindings
  default actions bound to mouse events
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

      -- mod-button1, Set the window to floating mode and move by dragging
      [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

      -- mod-button2, Raise the window to the top of the stack
      , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

      -- mod-button3, Set the window to floating mode and resize by dragging
      , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

      -- you may also bind events to the mouse scroll wheel (button4 and button5)
      ]
  #+end_src
* layouts
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  myLayout = tiled ||| Mirror tiled ||| Full
    where
      -- default tiling algorithm partitions the screen into two panes
      tiled   = Tall nmaster delta ratio

      -- The default number of windows in the master pane
      nmaster = 1

      -- Default proportion of screen occupied by master pane
      ratio   = 1/2

      -- Percent of screen to increment by when resizing panes
      delta   = 1/100
  #+end_src
* window rules
  Execute arbitrary actions and WindowSet manipulations when managing
  a new window. You can use this to, for example, always float a
  particular program, or have a client always appear on a particular
  workspace.

  To find the property name associated with a program, use
  > xprop | grep WM_CLASS
  and click on the client you're interested in.

  To match on the WM_NAME, you can use 'title' in the same way that
  'className' and 'resource' are used below.
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  myManageHook = composeAll
      [ className =? "MPlayer"        --> doFloat
      , className =? "Gimp"           --> doFloat
      , resource  =? "desktop_window" --> doIgnore
      , resource  =? "kdesktop"       --> doIgnore ]
  #+end_src
* event handling
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  -- Defines a custom handler function for X Events. The function should
  -- return (All True) if the default handler is to be run afterwards. To
  -- combine event hooks use mappend or mconcat from Data.Monoid.
  --
  -- * NOTE: EwmhDesktops users should use the 'ewmh' function from
  -- XMonad.Hooks.EwmhDesktops to modify their defaultConfig as a whole.
  -- It will add EWMH event handling to your custom event hooks by
  -- combining them with ewmhDesktopsEventHook.
  --
  myEventHook = mempty
  #+end_src
* main
  #+begin_src haskell :tangle ~/.xmonad/xmonad.hs
  main = do
    xmonad kde4Config {
          terminal           = myTerminal,
          focusFollowsMouse  = myFocusFollowsMouse,
          borderWidth        = myBorderWidth,
          modMask            = myModMask,
          workspaces         = myWorkspaces,
          normalBorderColor  = myNormalBorderColor,
          focusedBorderColor = myFocusedBorderColor,
          keys               = myKeys,
          mouseBindings      = myMouseBindings,
          manageHook = manageHook kde4Config <+> manageHook defaultConfig,
          handleEventHook    = myEventHook
      }
  #+end_src
