* <f1>

*** [note]
    point-to-register: C-x r SPC
    jump-to-register: C-x r j
    get-register

*** init-<f1>
    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; (define-prefix-command '<f1>-map)
    ;; (global-set-key (kbd "<f1>") '<f1>-map)


    (defun init-<f1> ()
      (interactive)
      (progn
        (cond ((memq major-mode modes-about-lisp)
               (init-<f1>-for-lisp))

              ((eq major-mode 'cicada-nymph-mode)
               (init-<f1>-for-cicada-nymph))

              ((eq major-mode 'org-mode)
               ;; for i am a LISPer
               (init-<f1>-for-lisp))

              ((eq major-mode 'coq-mode)
               (init-<f1>-for-coq))

              ((memq major-mode modes-about-haskell)
               (init-<f1>-for-haskell))

              ((memq major-mode modes-about-C)
               (init-<f1>-for-C))

              ((eq major-mode 'caml-mode)
               (init-<f1>-for-caml))

              (t
               (message "<f1> have do nothing in this major mode"))

              )))

    (global-set-key (kbd "<f1>") 'init-<f1>)
    #+end_src

*** insert things
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun insert-lambda () (interactive) (insert "lambda"))

    ;; first-order-logic
    (defun insert-∧ () (interactive) (insert "∧"))
    (defun insert-∨ () (interactive) (insert "∨"))
    (defun insert-¬ () (interactive) (insert "¬"))
    (defun insert-→ () (interactive) (insert "→"))
    (defun insert-← () (interactive) (insert "←"))
    (defun insert-↔ () (interactive) (insert "↔"))
    (defun insert-∃ () (interactive) (insert "∃"))
    (defun insert-∀ () (interactive) (insert "∀"))

    ;; set theory
    (defun insert-∈ () (interactive) (insert "∈"))
    (defun insert-⋶ () (interactive) (insert "⋶"))
    (defun insert-є () (interactive) (insert "є"))
    (defun insert-э () (interactive) (insert "э"))
    (defun insert-⊂ () (interactive) (insert "⊂"))
    (defun insert-⊃ () (interactive) (insert "⊃"))
    (defun insert-⊄ () (interactive) (insert "⊄"))
    (defun insert-⊅ () (interactive) (insert "⊅"))
    (defun insert-⊆ () (interactive) (insert "⊆"))
    (defun insert-⊇ () (interactive) (insert "⊇"))
    (defun insert-∩ () (interactive) (insert "∩"))
    (defun insert-∪ () (interactive) (insert "∪"))
    (defun insert-∅ () (interactive) (insert "∅"))

    ;; about function
    (defun insert-↤ () (interactive) (insert "↤"))
    (defun insert-↦ () (interactive) (insert "↦"))
    (defun insert-<- () (interactive) (insert "<-"))
    (defun insert--> () (interactive) (insert "->"))

    ;; proof theory
    (defun insert-≡ () (interactive) (insert "≡"))
    (defun insert-ͱ () (interactive) (insert "ͱ"))
    (defun insert-⊢ () (interactive) (insert "⊢"))
    (defun insert-⊦ () (interactive) (insert "⊦"))

    ;; _ and ^
    (defun insert-∞ () (interactive) (insert "∞"))
    (defun insert-√ () (interactive) (insert "√"))
    (defun insert-¿ () (interactive) (insert "¿"))
    (defun insert-° () (interactive) (insert "°"))

    ;; mics
    (defun insert-ߊ () (interactive) (insert "ߊ"))
    (defun insert-▓ () (interactive) (insert "▓"))
    #+end_src

*** init-<f1>-for-cicada-nymph
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f1>-for-cicada-nymph ()
      (interactive)
      (progn
        ;; 需要快捷输入 lambda
        (local-set-key
         (kbd "<f1> <f1>")
         (lambda ()
           (interactive)
           (insert ": ")
           (point-to-register ?c)
           (insert "\n")
           (insert "  << -- >>\n")
           (insert "  \n")
           (insert "  end\n")
           (insert "; define-function")
           (jump-to-register ?c)
           ))

        ;; connectives
        (local-set-key (kbd "<f1> c") 'insert-∧);; conjunction
        (local-set-key (kbd "<f1> d") 'insert-∨);; disjunction
        (local-set-key (kbd "<f1> -") 'insert-¬);; negation
        (local-set-key (kbd "<f1> <right>") 'insert-→);; implication
        (local-set-key (kbd "<f1> <S-right>") 'insert-↔);; equivalence
        ;; quantifiers
        (local-set-key (kbd "<f1> a") 'insert-∀);; all
        (local-set-key (kbd "<f1> e") 'insert-∃);; exist

        ;; set thoery
        (local-set-key (kbd "<f1> b") 'insert-∈);; belong to
        (local-set-key (kbd "<f1> 0") 'insert-∅)
        (local-set-key (kbd "<f1> [") 'insert-⊂)
        (local-set-key (kbd "<f1> ]") 'insert-⊃)
        (local-set-key (kbd "<f1> u") 'insert-∪)
        (local-set-key (kbd "<f1> n") 'insert-∩)


        (local-set-key (kbd "<f1> k") 'insert-√);; check
        (local-set-key (kbd "<f1> =") 'insert-≡)
        (local-set-key (kbd "<f1> i") 'insert-ͱ);; inference

        ;; _ and ^
        (local-set-key (kbd "<f1> o") 'insert-°)
        (local-set-key (kbd "<f1> 9") 'insert-∞)
        ))
    #+end_src

*** init-<f1>-for-lisp
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f1>-for-lisp ()
      (interactive)
      (progn
            ;; 需要快捷输入 lambda
            (local-set-key (kbd "<f1> <f1>") 'insert-lambda)

            ;; connectives
            (local-set-key (kbd "<f1> c") 'insert-∧);; conjunction
            (local-set-key (kbd "<f1> d") 'insert-∨);; disjunction
            (local-set-key (kbd "<f1> -") 'insert-¬);; negation
            (local-set-key (kbd "<f1> <right>") 'insert-→);; implication
            (local-set-key (kbd "<f1> <S-right>") 'insert-↔);; equivalence
            ;; quantifiers
            (local-set-key (kbd "<f1> a") 'insert-∀);; all
            (local-set-key (kbd "<f1> e") 'insert-∃);; exist

            ;; set thoery
            (local-set-key (kbd "<f1> b") 'insert-∈);; belong to
            (local-set-key (kbd "<f1> 0") 'insert-∅)
            (local-set-key (kbd "<f1> [") 'insert-⊂)
            (local-set-key (kbd "<f1> ]") 'insert-⊃)
            (local-set-key (kbd "<f1> u") 'insert-∪)
            (local-set-key (kbd "<f1> n") 'insert-∩)


            (local-set-key (kbd "<f1> k") 'insert-√);; check
            (local-set-key (kbd "<f1> =") 'insert-≡)
            (local-set-key (kbd "<f1> i") 'insert-ͱ);; inference

            ;; _ and ^
            (local-set-key (kbd "<f1> o") 'insert-°)
            (local-set-key (kbd "<f1> 9") 'insert-∞)
            ))
    #+end_src

*** init-<f1>-for-haskell
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f1>-for-haskell ()
      (interactive)
      (progn
            ;; 需要快捷输入->
            (local-set-key (kbd "<f1> <f1>") 'insert-->)

            ;; connectives
            (local-set-key (kbd "<f1> c") 'insert-∧);; conjunction
            (local-set-key (kbd "<f1> d") 'insert-∨);; disjunction
            (local-set-key (kbd "<f1> n") 'insert-¬);; negation
            (local-set-key (kbd "<f1> <right>") 'insert-→);; implication
            (local-set-key (kbd "<f1> <S-right>") 'insert-↔);; equivalence
            ;; quantifiers
            (local-set-key (kbd "<f1> a") 'insert-∀);; all
            (local-set-key (kbd "<f1> e") 'insert-∃);; exist

            ;; set thoery
            (local-set-key (kbd "<f1> b") 'insert-∈);; belong to
            (local-set-key (kbd "<f1> 0") 'insert-∅)
            (local-set-key (kbd "<f1> [") 'insert-⊂)
            (local-set-key (kbd "<f1> ]") 'insert-⊃)

            (local-set-key (kbd "<f1> k") 'insert-√);; check
            (local-set-key (kbd "<f1> =") 'insert-≡)
            (local-set-key (kbd "<f1> i") 'insert-ͱ);; inference

            ;; _ and ^
            (local-set-key (kbd "<f1> o") 'insert-°)
            ))
    #+end_src

*** init-<f1>-for-C
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f1>-for-C ()
       (interactive)
       (progn
             (local-set-key (kbd "<f1> <f1> <f1>")
                            (lambda ()
                              (interactive)
                              (insert "main ()\n{\n  \n}")
                              (left-char 2)))
             (local-set-key (kbd "<f1> <f1> f")
                            (lambda ()
                              (interactive)
                              ;; ?C == 67
                              (progn
                            (insert "for (")
                            (c-indent-line-or-region)
                            (point-to-register ?C)
                            (insert "; ; )\n;")
                            (c-indent-line-or-region)
                            (right-char 2)
                            (c-indent-line-or-region)
                            (jump-to-register ?C))))
             ;; (local-set-key (kbd "<f1> <f1> c")
             ;;                (lambda ()
             ;;                  (interactive)
             ;;                  ;; ?C == 67
             ;;                  (progn
             ;;                    (insert "for (")
             ;;                    (c-indent-line-or-region)
             ;;                    (point-to-register ?C)
             ;;                    (insert "; ; )\n;")
             ;;                    (c-indent-line-or-region)
             ;;                    (right-char 2)
             ;;                    (c-indent-line-or-region)
             ;;                    (jump-to-register ?C))))

             (local-set-key (kbd "<f1> <f1> i")
                            (lambda ()
                              (interactive)
                              (insert "# include <.h>")
                              (left-char 3)))
             (local-set-key (kbd "<f1> <f1> d")
                            (lambda ()
                              (interactive)
                              (insert "# define ")))
             (local-set-key (kbd "<f1> t")
                            ;; t denote type
                            (lambda ()
                              (interactive)
                              (insert "/* ")
                              (point-to-register ?t)
                              (insert " ::  <-  */\n")
                              (insert "/*\n")
                              (insert "  CREATE:\n\n")
                              (insert "  READ:\n\n")
                              (insert "  WRITE:\n\n")
                              (insert "*/\n")
                              (jump-to-register ?t)
                              ))

             ;; connectives
             (local-set-key (kbd "<f1> c") 'insert-∧);; conjunction
             (local-set-key (kbd "<f1> d") 'insert-∨);; disjunction
             (local-set-key (kbd "<f1> n") 'insert-¬);; negation
             (local-set-key (kbd "<f1> <right>") 'insert-→);; implication
             (local-set-key (kbd "<f1> <S-right>") 'insert-↔);; equivalence
             ;; quantifiers
             (local-set-key (kbd "<f1> a") 'insert-∀);; all
             (local-set-key (kbd "<f1> e") 'insert-∃);; exist

             ;; set thoery
             (local-set-key (kbd "<f1> b") 'insert-∈);; belong to
             (local-set-key (kbd "<f1> 0") 'insert-∅)
             (local-set-key (kbd "<f1> [") 'insert-⊂)
             (local-set-key (kbd "<f1> ]") 'insert-⊃)

             (local-set-key (kbd "<f1> k") 'insert-√);; check
             (local-set-key (kbd "<f1> =") 'insert-≡)
             (local-set-key (kbd "<f1> i") 'insert-ͱ);; inference

             ;; _ and ^
             (local-set-key (kbd "<f1> o") 'insert-°)
             ))
    #+end_src

*** init-<f1>-for-coq
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f1>-for-coq ()
      (interactive)
      (progn
            (local-set-key (kbd "<f1> <f1>")
                            (lambda ()
                              (interactive)
                              (progn
                            (insert "Eval compute in\n")
                            (indent-for-tab-command))))
            (local-set-key (kbd "<f1> p")
                           (lambda ()
                             (interactive)
                             (progn
                               (insert "Proof.\n")
                               (indent-for-tab-command)
                               (point-to-register ?c)
                               (insert "\nQed.")
                               (jump-to-register ?c))))

            ;; connectives
            (local-set-key (kbd "<f1> c") 'insert-∧);; conjunction
            (local-set-key (kbd "<f1> d") 'insert-∨);; disjunction
            (local-set-key (kbd "<f1> n") 'insert-¬);; negation
            (local-set-key (kbd "<f1> <right>") 'insert-→);; implication
            (local-set-key (kbd "<f1> <S-right>") 'insert-↔);; equivalence
            ;; quantifiers
            (local-set-key (kbd "<f1> a") 'insert-∀);; all
            ;; (local-set-key (kbd "<f1> e") 'insert-∃);; exist

            ;; set thoery
            (local-set-key (kbd "<f1> b") 'insert-∈);; belong to
            (local-set-key (kbd "<f1> 0") 'insert-∅)
            (local-set-key (kbd "<f1> [") 'insert-⊂)
            (local-set-key (kbd "<f1> ]") 'insert-⊃)

            (local-set-key (kbd "<f1> k") 'insert-√);; check
            (local-set-key (kbd "<f1> =") 'insert-≡)
            (local-set-key (kbd "<f1> i") 'insert-ͱ);; inference

            ;; _ and ^
            (local-set-key (kbd "<f1> o") 'insert-°)
            ))
    #+end_src

*** init-<f1>-for-caml
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f1>-for-caml ()
      (interactive)
      (progn
            ;; 需要快捷输入 lambda
            (local-set-key (kbd "<f1> <f1>")
                       (lambda ()
                             (interactive)
                             (progn
                               (insert "function ")
                               (insert "(")
                               (point-to-register ?m)
                               (insert ")")
                               (caml-indent-command)
                               (insert "\n")
                               (insert "-> ")
                               (caml-indent-command)
                               (jump-to-register ?m))))

            ;; connectives
            (local-set-key (kbd "<f1> c") 'insert-∧)        ;; conjunction
            (local-set-key (kbd "<f1> d") 'insert-∨)        ;; disjunction
            (local-set-key (kbd "<f1> -") 'insert-¬)         ;; negation
            (local-set-key (kbd "<f1> <right>") 'insert-→)  ;; implication
            (local-set-key (kbd "<f1> <S-right>") 'insert-↔) ;; equivalence
            ;; quantifiers
            (local-set-key (kbd "<f1> a") 'insert-∀) ;; all
            (local-set-key (kbd "<f1> e") 'insert-∃) ;; exist

            ;; set thoery
            (local-set-key (kbd "<f1> b") 'insert-∈) ;; belong to
            (local-set-key (kbd "<f1> 0") 'insert-∅)
            (local-set-key (kbd "<f1> [") 'insert-⊂)
            (local-set-key (kbd "<f1> ]") 'insert-⊃)
            (local-set-key (kbd "<f1> u") 'insert-∪)
            (local-set-key (kbd "<f1> n") 'insert-∩)


            (local-set-key (kbd "<f1> k") 'insert-√) ;; check
            (local-set-key (kbd "<f1> =") 'insert-≡)
            (local-set-key (kbd "<f1> i") 'insert-ͱ) ;; inference

            ;; _ and ^
            (local-set-key (kbd "<f1> o") 'insert-°)
            (local-set-key (kbd "<f1> 9") 'insert-∞)
            ))
    #+end_src

* <f2>

*** init-<f2>
    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; (define-prefix-command '<f2>-map)
    ;; (global-set-key (kbd "<f2>") '<f2>-map)

    (defun init-<f2> ()
      (interactive)
      (cond ((memq major-mode modes-about-lisp)
             (init-<f2>-for-lisp))

            ((eq major-mode 'cicada-nymph-mode)
             (init-<f2>-for-cicada-nymph))

            ((eq major-mode 'org-mode)
             ;; for i am a LISPer
             (init-<f2>-for-lisp))

            ((eq major-mode 'coq-mode)
             (init-<f2>-for-coq))

            ((eq major-mode 'agda2-mode)
             (init-<f2>-for-agda))

            ((eq major-mode 'caml-mode)
             (init-<f2>-for-caml))

            ((memq major-mode modes-about-haskell)
             (init-<f2>-for-haskell))

            (t
             (message "<f2> have do nothing in this major mode"))

            ))
    (global-set-key (kbd "<f2>") 'init-<f2>)
    #+end_src

*** insert things
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun insert-α () (interactive) (insert "α"))
    (defun insert-β () (interactive) (insert "β"))
    (defun insert-γ () (interactive) (insert "γ"))
    (defun insert-δ () (interactive) (insert "δ"))
    (defun insert-ε () (interactive) (insert "ε"))
    (defun insert-θ () (interactive) (insert "θ"))
    (defun insert-Θ () (interactive) (insert "Θ"))
    (defun insert-ι () (interactive) (insert "ι"))
    (defun insert-κ () (interactive) (insert "κ"))
    (defun insert-λ () (interactive) (insert "λ"))
    (defun insert-Λ () (interactive) (insert "Λ"))
    (defun insert-σ () (interactive) (insert "σ"))
    (defun insert-ς () (interactive) (insert "ς"))
    (defun insert-Σ () (interactive) (insert "Σ"))
    (defun insert-τ () (interactive) (insert "τ"))
    (defun insert-ζ () (interactive) (insert "ζ"))
    (defun insert-ω () (interactive) (insert "ω"))
    (defun insert-Ω () (interactive) (insert "Ω"))
    (defun insert-π () (interactive) (insert "π"))
    (defun insert-Π () (interactive) (insert "Π"))
    (defun insert-ρ () (interactive) (insert "ρ"))
    (defun insert-φ () (interactive) (insert "φ"))
    (defun insert-Φ () (interactive) (insert "Φ"))
    (defun insert-υ () (interactive) (insert "υ"))
    (defun insert-ν () (interactive) (insert "ν"))
    (defun insert-χ () (interactive) (insert "χ"))
    (defun insert-Ψ () (interactive) (insert "Ψ"))
    (defun insert-ψ () (interactive) (insert "ψ"))
    (defun insert-μ () (interactive) (insert "μ"))
    (defun insert-η () (interactive) (insert "η"))
    (defun insert-Γ () (interactive) (insert "Γ"))
    (defun insert-Δ () (interactive) (insert "Δ"))
    (defun insert-ξ () (interactive) (insert "ξ"))
    (defun insert-Ξ () (interactive) (insert "Ξ"))
    #+end_src

*** init-<f2>-for-cicada-nymph
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f2>-for-cicada-nymph ()
      (interactive)
      (progn
        ;; 需要快捷输入λ
        (local-set-key (kbd "<f2> <f2>") 'insert-λ)

        (local-set-key (kbd "<f2> a") 'insert-α)
        (local-set-key (kbd "<f2> b") 'insert-β)
        (local-set-key (kbd "<f2> c") 'insert-γ)
        (local-set-key (kbd "<f2> C") 'insert-Γ)
        (local-set-key (kbd "<f2> g") 'insert-γ)
        (local-set-key (kbd "<f2> G") 'insert-Γ)
        (local-set-key (kbd "<f2> d") 'insert-δ)
        (local-set-key (kbd "<f2> D") 'insert-Δ)
        (local-set-key (kbd "<f2> e") 'insert-ε)
        (local-set-key (kbd "<f2> f") 'insert-φ)
        (local-set-key (kbd "<f2> F") 'insert-Φ)
        ;; th = Θ, θ
        (local-set-key (kbd "<f2> h") 'insert-θ)
        (local-set-key (kbd "<f2> H") 'insert-Θ)
        (local-set-key (kbd "<f2> i") 'insert-η)
        ;;(local-set-key (kbd "<f2> i") 'insert-ι)
        (local-set-key (kbd "<f2> k") 'insert-κ)
        (local-set-key (kbd "<f2> l") 'insert-λ)
        (local-set-key (kbd "<f2> L") 'insert-Λ)
        (local-set-key (kbd "<f2> m") 'insert-μ)
        (local-set-key (kbd "<f2> n") 'insert-ν)
        (local-set-key (kbd "<f2> o") 'insert-ω)
        (local-set-key (kbd "<f2> O") 'insert-Ω)
        (local-set-key (kbd "<f2> p") 'insert-π)
        (local-set-key (kbd "<f2> P") 'insert-Π)
        (local-set-key (kbd "<f2> r") 'insert-ρ)
        (local-set-key (kbd "<f2> s") 'insert-σ)
        ;; final sigma
        ;;(local-set-key (kbd "<f2> s") 'insert-ς)
        (local-set-key (kbd "<f2> S") 'insert-Σ)
        (local-set-key (kbd "<f2> t") 'insert-τ)
        (local-set-key (kbd "<f2> u") 'insert-υ)
        (local-set-key (kbd "<f2> v") nil)
        (local-set-key (kbd "<f2> x") 'insert-ξ)
        (local-set-key (kbd "<f2> X") 'insert-Ξ)
        ;; ps = ψ, Ψ
        (local-set-key (kbd "<f2> y") 'insert-Ψ)
        (local-set-key (kbd "<f2> Y") 'insert-ψ)
        (local-set-key (kbd "<f2> z") 'insert-ζ)
        ))
    #+end_src

*** init-<f2>-for-lisp
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f2>-for-lisp ()
      (interactive)
      (progn
        ;; 需要快捷输入λ
        (local-set-key (kbd "<f2> <f2>") 'insert-λ)

        (local-set-key (kbd "<f2> a") 'insert-α)
        (local-set-key (kbd "<f2> b") 'insert-β)
        (local-set-key (kbd "<f2> c") 'insert-γ)
        (local-set-key (kbd "<f2> C") 'insert-Γ)
        (local-set-key (kbd "<f2> g") 'insert-γ)
        (local-set-key (kbd "<f2> G") 'insert-Γ)
        (local-set-key (kbd "<f2> d") 'insert-δ)
        (local-set-key (kbd "<f2> D") 'insert-Δ)
        (local-set-key (kbd "<f2> e") 'insert-ε)
        (local-set-key (kbd "<f2> f") 'insert-φ)
        (local-set-key (kbd "<f2> F") 'insert-Φ)
        ;; th = Θ, θ
        (local-set-key (kbd "<f2> h") 'insert-θ)
        (local-set-key (kbd "<f2> H") 'insert-Θ)
        (local-set-key (kbd "<f2> i") 'insert-η)
        ;;(local-set-key (kbd "<f2> i") 'insert-ι)
        (local-set-key (kbd "<f2> k") 'insert-κ)
        (local-set-key (kbd "<f2> l") 'insert-λ)
        (local-set-key (kbd "<f2> L") 'insert-Λ)
        (local-set-key (kbd "<f2> m") 'insert-μ)
        (local-set-key (kbd "<f2> n") 'insert-ν)
        (local-set-key (kbd "<f2> o") 'insert-ω)
        (local-set-key (kbd "<f2> O") 'insert-Ω)
        (local-set-key (kbd "<f2> p") 'insert-π)
        (local-set-key (kbd "<f2> P") 'insert-Π)
        (local-set-key (kbd "<f2> r") 'insert-ρ)
        (local-set-key (kbd "<f2> s") 'insert-σ)
        ;; final sigma
        ;;(local-set-key (kbd "<f2> s") 'insert-ς)
        (local-set-key (kbd "<f2> S") 'insert-Σ)
        (local-set-key (kbd "<f2> t") 'insert-τ)
        (local-set-key (kbd "<f2> u") 'insert-υ)
        (local-set-key (kbd "<f2> v") nil)
        (local-set-key (kbd "<f2> x") 'insert-ξ)
        (local-set-key (kbd "<f2> X") 'insert-Ξ)
        ;; ps = ψ, Ψ
        (local-set-key (kbd "<f2> y") 'insert-Ψ)
        (local-set-key (kbd "<f2> Y") 'insert-ψ)
        (local-set-key (kbd "<f2> z") 'insert-ζ)
        ))
    #+end_src

*** init-<f2>-for-haskell
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f2>-for-haskell ()
      (interactive)
      (progn
        ;; 需要快捷输入λ
        (local-set-key (kbd "<f2> <f2>") (lambda ()
                                           (interactive)
                                           (insert "(\\ -> )")
                                           (left-char 5)))
        (local-set-key (kbd "<f2> <right>") (lambda ()
                                              (interactive)
                                              (insert "->")))
        (local-set-key (kbd "<f2> <left>") (lambda ()
                                             (interactive)
                                             (insert "<-")))

        (local-set-key (kbd "<f2> a") 'insert-α)
        (local-set-key (kbd "<f2> b") 'insert-β)
        (local-set-key (kbd "<f2> c") 'insert-γ)
        (local-set-key (kbd "<f2> C") 'insert-Γ)
        (local-set-key (kbd "<f2> g") 'insert-γ)
        (local-set-key (kbd "<f2> G") 'insert-Γ)
        (local-set-key (kbd "<f2> d") 'insert-δ)
        (local-set-key (kbd "<f2> D") 'insert-Δ)
        (local-set-key (kbd "<f2> e") 'insert-ε)
        (local-set-key (kbd "<f2> f") 'insert-φ)
        (local-set-key (kbd "<f2> F") 'insert-Φ)
        ;; th = Θ, θ
        (local-set-key (kbd "<f2> h") 'insert-θ)
        (local-set-key (kbd "<f2> H") 'insert-Θ)
        (local-set-key (kbd "<f2> i") 'insert-η)
        ;;(local-set-key (kbd "<f2> i") 'insert-ι)
        (local-set-key (kbd "<f2> k") 'insert-κ)
        (local-set-key (kbd "<f2> l") 'insert-λ)
        (local-set-key (kbd "<f2> L") 'insert-Λ)
        (local-set-key (kbd "<f2> m") 'insert-μ)
        (local-set-key (kbd "<f2> n") 'insert-ν)
        (local-set-key (kbd "<f2> o") 'insert-ω)
        (local-set-key (kbd "<f2> O") 'insert-Ω)
        (local-set-key (kbd "<f2> p") 'insert-π)
        (local-set-key (kbd "<f2> P") 'insert-Π)
        (local-set-key (kbd "<f2> r") 'insert-ρ)
        (local-set-key (kbd "<f2> s") 'insert-σ)
        ;; final sigma
        ;;(local-set-key (kbd "<f2> s") 'insert-ς)
        (local-set-key (kbd "<f2> S") 'insert-Σ)
        (local-set-key (kbd "<f2> t") 'insert-τ)
        (local-set-key (kbd "<f2> u") 'insert-υ)
        (local-set-key (kbd "<f2> v") nil)
        (local-set-key (kbd "<f2> x") 'insert-ξ)
        (local-set-key (kbd "<f2> X") 'insert-Ξ)
        ;; ps = ψ, Ψ
        (local-set-key (kbd "<f2> y") 'insert-Ψ)
        (local-set-key (kbd "<f2> Y") 'insert-ψ)
        (local-set-key (kbd "<f2> z") 'insert-ζ)
        ))
    #+end_src

*** init-<f2>-for-coq
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f2>-for-coq ()
      (interactive)
      (progn
        ;; 需要快捷输入λ
        (local-set-key (kbd "<f2> <f2>") 'insert-λ)

        (local-set-key (kbd "<f2> a") 'insert-α)
        (local-set-key (kbd "<f2> b") 'insert-β)
        (local-set-key (kbd "<f2> c") 'insert-γ)
        (local-set-key (kbd "<f2> C") 'insert-Γ)
        (local-set-key (kbd "<f2> g") 'insert-γ)
        (local-set-key (kbd "<f2> G") 'insert-Γ)
        (local-set-key (kbd "<f2> d") 'insert-δ)
        (local-set-key (kbd "<f2> D") 'insert-Δ)
        (local-set-key (kbd "<f2> e") 'insert-ε)
        (local-set-key (kbd "<f2> f") 'insert-φ)
        (local-set-key (kbd "<f2> F") 'insert-Φ)
        ;; th = Θ, θ
        (local-set-key (kbd "<f2> h") 'insert-θ)
        (local-set-key (kbd "<f2> H") 'insert-Θ)
        (local-set-key (kbd "<f2> i") 'insert-η)
        ;;(local-set-key (kbd "<f2> i") 'insert-ι)
        (local-set-key (kbd "<f2> k") 'insert-κ)
        (local-set-key (kbd "<f2> l") 'insert-λ)
        (local-set-key (kbd "<f2> L") 'insert-Λ)
        (local-set-key (kbd "<f2> m") 'insert-μ)
        (local-set-key (kbd "<f2> n") 'insert-ν)
        (local-set-key (kbd "<f2> o") 'insert-ω)
        (local-set-key (kbd "<f2> O") 'insert-Ω)
        (local-set-key (kbd "<f2> p") 'insert-π)
        (local-set-key (kbd "<f2> P") 'insert-Π)
        (local-set-key (kbd "<f2> r") 'insert-ρ)
        (local-set-key (kbd "<f2> s") 'insert-σ)
        ;; final sigma
        ;;(local-set-key (kbd "<f2> s") 'insert-ς)
        (local-set-key (kbd "<f2> S") 'insert-Σ)
        (local-set-key (kbd "<f2> t") 'insert-τ)
        (local-set-key (kbd "<f2> u") 'insert-υ)
        (local-set-key (kbd "<f2> v") nil)
        (local-set-key (kbd "<f2> x") 'insert-ξ)
        (local-set-key (kbd "<f2> X") 'insert-Ξ)
        ;; ps = ψ, Ψ
        (local-set-key (kbd "<f2> y") 'insert-Ψ)
        (local-set-key (kbd "<f2> Y") 'insert-ψ)
        (local-set-key (kbd "<f2> z") 'insert-ζ)
        ))
    #+end_src

*** init-<f2>-for-agda
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f2>-for-agda ()
      (interactive)
      (progn
        ;; 需要快捷输入λ
        (local-set-key (kbd "<f2> <f2>") 'insert-λ)

        (local-set-key (kbd "<f2> a") 'insert-α)
        (local-set-key (kbd "<f2> b") 'insert-β)
        (local-set-key (kbd "<f2> c") 'insert-γ)
        (local-set-key (kbd "<f2> C") 'insert-Γ)
        (local-set-key (kbd "<f2> g") 'insert-γ)
        (local-set-key (kbd "<f2> G") 'insert-Γ)
        (local-set-key (kbd "<f2> d") 'insert-δ)
        (local-set-key (kbd "<f2> D") 'insert-Δ)
        (local-set-key (kbd "<f2> e") 'insert-ε)
        (local-set-key (kbd "<f2> f") 'insert-φ)
        (local-set-key (kbd "<f2> F") 'insert-Φ)
        ;; th = Θ, θ
        (local-set-key (kbd "<f2> h") 'insert-θ)
        (local-set-key (kbd "<f2> H") 'insert-Θ)
        (local-set-key (kbd "<f2> i") 'insert-η)
        ;;(local-set-key (kbd "<f2> i") 'insert-ι)
        (local-set-key (kbd "<f2> k") 'insert-κ)
        (local-set-key (kbd "<f2> l") 'insert-λ)
        (local-set-key (kbd "<f2> L") 'insert-Λ)
        (local-set-key (kbd "<f2> m") 'insert-μ)
        (local-set-key (kbd "<f2> n") 'insert-ν)
        (local-set-key (kbd "<f2> o") 'insert-ω)
        (local-set-key (kbd "<f2> O") 'insert-Ω)
        (local-set-key (kbd "<f2> p") 'insert-π)
        (local-set-key (kbd "<f2> P") 'insert-Π)
        (local-set-key (kbd "<f2> r") 'insert-ρ)
        (local-set-key (kbd "<f2> s") 'insert-σ)
        ;; final sigma
        ;;(local-set-key (kbd "<f2> s") 'insert-ς)
        (local-set-key (kbd "<f2> S") 'insert-Σ)
        (local-set-key (kbd "<f2> t") 'insert-τ)
        (local-set-key (kbd "<f2> u") 'insert-υ)
        (local-set-key (kbd "<f2> v") nil)
        (local-set-key (kbd "<f2> x") 'insert-ξ)
        (local-set-key (kbd "<f2> X") 'insert-Ξ)
        ;; ps = ψ, Ψ
        (local-set-key (kbd "<f2> y") 'insert-Ψ)
        (local-set-key (kbd "<f2> Y") 'insert-ψ)
        (local-set-key (kbd "<f2> z") 'insert-ζ)
        ))
    #+end_src

*** init-<f2>-for-caml
    #+begin_src emacs-lisp :tangle ~/.emacs
    (defun init-<f2>-for-caml ()
      (interactive)
      (progn
        (local-set-key (kbd "<f2> <f2>")
                       (lambda ()
                         (interactive)
                         (progn
                           (insert "| ")
                           (insert "(")
                           (point-to-register ?m)
                           (insert ")")
                           (caml-indent-command)
                           (insert "\n")
                           (insert "-> ")
                           (caml-indent-command)
                           (jump-to-register ?m))))

        (local-set-key (kbd "<f2> a") 'insert-α)
        (local-set-key (kbd "<f2> b") 'insert-β)
        (local-set-key (kbd "<f2> c") 'insert-γ)
        (local-set-key (kbd "<f2> C") 'insert-Γ)
        (local-set-key (kbd "<f2> g") 'insert-γ)
        (local-set-key (kbd "<f2> G") 'insert-Γ)
        (local-set-key (kbd "<f2> d") 'insert-δ)
        (local-set-key (kbd "<f2> D") 'insert-Δ)
        (local-set-key (kbd "<f2> e") 'insert-ε)
        (local-set-key (kbd "<f2> f") 'insert-φ)
        (local-set-key (kbd "<f2> F") 'insert-Φ)
        ;; th = Θ, θ
        (local-set-key (kbd "<f2> h") 'insert-θ)
        (local-set-key (kbd "<f2> H") 'insert-Θ)
        (local-set-key (kbd "<f2> i") 'insert-η)
        ;;(local-set-key (kbd "<f2> i") 'insert-ι)
        (local-set-key (kbd "<f2> k") 'insert-κ)
        (local-set-key (kbd "<f2> l") 'insert-λ)
        (local-set-key (kbd "<f2> L") 'insert-Λ)
        (local-set-key (kbd "<f2> m") 'insert-μ)
        (local-set-key (kbd "<f2> n") 'insert-ν)
        (local-set-key (kbd "<f2> o") 'insert-ω)
        (local-set-key (kbd "<f2> O") 'insert-Ω)
        (local-set-key (kbd "<f2> p") 'insert-π)
        (local-set-key (kbd "<f2> P") 'insert-Π)
        (local-set-key (kbd "<f2> r") 'insert-ρ)
        (local-set-key (kbd "<f2> s") 'insert-σ)
        ;; final sigma
        ;;(local-set-key (kbd "<f2> s") 'insert-ς)
        (local-set-key (kbd "<f2> S") 'insert-Σ)
        (local-set-key (kbd "<f2> t") 'insert-τ)
        (local-set-key (kbd "<f2> u") 'insert-υ)
        (local-set-key (kbd "<f2> v") nil)
        (local-set-key (kbd "<f2> x") 'insert-ξ)
        (local-set-key (kbd "<f2> X") 'insert-Ξ)
        ;; ps = ψ, Ψ
        (local-set-key (kbd "<f2> y") 'insert-Ψ)
        (local-set-key (kbd "<f2> Y") 'insert-ψ)
        (local-set-key (kbd "<f2> z") 'insert-ζ)
        ))
    #+end_src
